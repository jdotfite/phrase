'use client'

import React, { useState, useEffect, useRef } from 'react';
import { supabase } from '@/lib/supabase';
import Papa from 'papaparse';
import { ChevronDown, ChevronUp, ChevronRight, ChevronLeft, X, Pencil, Save } from 'lucide-react';
import useCountUp from '@/hooks/useCountUp';  // Import the hook
import Login from '@/components/Login';

interface Phrase {
  id: number;
  phrase: string;
  category: string;
  difficulty: string;
  subcategory: string;
  tags: string;  
  hint: string;  
  part_of_speech: string;
  last_used?: string | null;
}

interface NewPhrase {
  phrase: string;
  category: string;
  difficulty: string;
  subcategory: string;
  tags: string;
  hint: string;
  part_of_speech: string;
}

interface Filters {
  category: string;
  difficulty: string;
  subcategory: string;
  part_of_speech: string;
  searchTerm: string;
}

interface PaginationState {
  currentPage: number;
  rowsPerPage: number;
  totalPages: number;
}

interface FieldProps {
  label: string;
  value: any;
  onChange?: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;
  type?: string;
  options?: string[];
}

const AdminDashboard = () => {
	const [showLoginModal, setShowLoginModal] = useState(false);
	const [session, setSession] = useState<any>(null);
	
useEffect(() => {
  // Remove initial checkAuth() call
  supabase.auth.onAuthStateChange((_event, session) => {
    setSession(session);
    if (session) {
      setShowLoginModal(false);
    }
  });
}, []);

  const [phrases, setPhrases] = useState<Phrase[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [newPhrase, setNewPhrase] = useState<NewPhrase>({
    phrase: '',
    category: '',
    difficulty: '',
    subcategory: '',
    tags: '',
    hint: '',
    part_of_speech: ''
  });
  


  const [stats, setStats] = useState({
    total: 0,
    uniqueCategories: 0,
    difficultyBreakdown: {
      easy: 0,
      medium: 0,
      hard: 0
    }
  });

  const [showCardModal, setShowCardModal] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isEditing, setIsEditing] = useState(false);
  const [editedPhrase, setEditedPhrase] = useState<Phrase | null>(null);
  const [selectedPhrase, setSelectedPhrase] = useState<Phrase | null>(null);
  const [expandedSection, setExpandedSection] = useState<string>('');
  const [pagination, setPagination] = useState<PaginationState>({
    currentPage: 1,
    rowsPerPage: 100,
    totalPages: 1
  });

  const isInitialRender = useRef(true);

  const animatedTotal = useCountUp(isInitialRender.current ? 0 : stats.total);
  const animatedUniqueCategories = useCountUp(isInitialRender.current ? 0 : stats.uniqueCategories);
  const animatedEasy = useCountUp(isInitialRender.current ? 0 : stats.difficultyBreakdown.easy);
  const animatedMedium = useCountUp(isInitialRender.current ? 0 : stats.difficultyBreakdown.medium);
  const animatedHard = useCountUp(isInitialRender.current ? 0 : stats.difficultyBreakdown.hard);

  useEffect(() => {
    if (isInitialRender.current) {
      isInitialRender.current = false;
    }
  }, []);

  const handleCancel = () => {
  
    setEditedPhrase(null);
    setIsEditing(false);
    resetFilters(); // Add this to reset search when closing modal
  };

const handleEdit = async () => {
  if (!(await checkAuth())) return;
  setEditedPhrase({
    ...phrases[currentIndex],
    id: phrases[currentIndex].id
  });
  setIsEditing(true);
};

const handleCardSave = async () => {
 if (!(await checkAuth())) return;
 await handleEditPhrase(editedPhrase!);
  setShowCardModal(false);
  setIsEditing(false);
};
 

  
  const [sortConfig, setSortConfig] = useState<{
    key: keyof Phrase | '';
    direction: 'asc' | 'desc'; 
  }>({ key: '', direction: 'asc' });
  
  const [filters, setFilters] = useState<Filters>({
    category: '',
    difficulty: '',
    subcategory: '',
    part_of_speech: '',
    searchTerm: ''
  });
  
  const displayPhrase = isEditing ? editedPhrase : phrases[currentIndex];
  
  const [categories, setCategories] = useState<string[]>([]);
  const [difficulties, setDifficulties] = useState<string[]>([]);
  const [partsOfSpeech, setPartsOfSpeech] = useState<string[]>([]);

const formatForDatabase = (value: string | null): string => {
  if (!value) return '';
  return value.trim();
};

  const cleanPhraseData = (phrase: Phrase): Phrase => {
    return {
      ...phrase,
      tags: formatForDatabase(phrase.tags),
      hint: formatForDatabase(phrase.hint)
    };
  };
  
   // Add Field component for card view
 const Field: React.FC<FieldProps> = ({ label, value, onChange, type = "text", options = [] }) => {
  if (isEditing) {
	// Add auth wrapper to onChange
	const handleAuthChange = async (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
      if (!(await checkAuth())) return;
      onChange?.(e);
    };
	
      if (type === "select") {
        return (
          <div className="mb-4">
            <label className="block text-gray-400 text-sm mb-1">{label}</label>
            <select
              value={value || ""}
              onChange={onChange}
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600"
            >
              <option value="">Select {label}</option>
              {options.map(opt => (
                <option key={opt} value={opt}>{opt}</option>
              ))}
            </select>
          </div>
        );
      }
      return (
        <div className="mb-4">
          <label className="block text-gray-400 text-sm mb-1">{label}</label>
          <input
            type={type}
            value={value || ""}
            onChange={onChange}
            className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600"
          />
        </div>
      );
    }

    const displayValue = (() => {
  if (!value) return '-';
  if (type === "tags") {
    const tags = value.split(',').map((t: string) => t.trim());
    return (
      <div className="flex flex-wrap gap-2 mt-2">
        {tags.map((tag: string, idx: number) => (
          <button
            key={idx}
            onClick={() => {
              setFilters(prev => ({ ...prev, searchTerm: tag }));
              setShowCardModal(false);
              applyFilters();
            }}
            className="px-3 py-1 bg-gray-700 rounded-full text-sm hover:bg-gray-600"
          >
            {tag}
          </button>
        ))}
      </div>
    );
  }
  return value;
})();

    return (
      <div className="mb-4">
        <span className="block text-gray-400 text-sm">{label}</span>
        <span className="block text-white">{displayValue}</span>
      </div>
    );
  };

  // Add card navigation handlers
  const handleNext = () => {
    if (currentIndex < phrases.length - 1) {
      setCurrentIndex(currentIndex + 1);
      setIsEditing(false);
    }
  };

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
      setIsEditing(false);
    }
  };

// Update table actions to include card view
  const renderTableActions = (phrase: Phrase) => (
    <div className="flex gap-4">
    <button
      onClick={() => setSelectedPhrase(phrase)}
      className="text-blue-400 hover:text-blue-300 transition-colors"
    >
      Edit
    </button>
    <button
      onClick={() => handleDeletePhrase(phrase.id)}
      className="text-red-400 hover:text-red-300 transition-colors"
    >
      Delete
    </button>
  </div>
  );
  
  useEffect(() => {
    fetchPhrases();
    calculateStats();
    fetchCategories();
    fetchDifficulties();
    fetchPartsOfSpeech();
  }, [filters, pagination.rowsPerPage, pagination.currentPage, sortConfig]);
  //centeral auth check
const checkAuth = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  setSession(session);
  if (!session) {
    setShowLoginModal(true);
    return false;
  }
  return true;
};
  const handleSort = (key: keyof Phrase) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
    setPagination(prev => ({ ...prev, currentPage: 1 })); // Reset to first page when sorting
  };

  const fetchPhrases = async () => {
    try {
      setLoading(true);
      let query = supabase.from('phrases').select('*', { count: 'exact' });

      // Apply filters
      if (filters.category) query = query.eq('category', filters.category);
      if (filters.difficulty) query = query.eq('difficulty', filters.difficulty);
      if (filters.subcategory) query = query.eq('subcategory', filters.subcategory);
      if (filters.part_of_speech) query = query.eq('part_of_speech', filters.part_of_speech);
      if (filters.searchTerm) {
        query = query.or(`phrase.ilike.%${filters.searchTerm}%,tags.cs.{${filters.searchTerm}}`);
      }

      // Apply sorting
      if (sortConfig.key) {
        // Ensure we're sorting null values last
        query = query.order(sortConfig.key, { 
          ascending: sortConfig.direction === 'asc',
          nullsFirst: false 
        });
      } else {
        // Default sort by last_used if no sort is specified
        query = query.order('last_used', { ascending: true, nullsFirst: false });
      }

      // Calculate pagination range
      const start = (pagination.currentPage - 1) * pagination.rowsPerPage;
      const end = start + pagination.rowsPerPage - 1;
      query = query.range(start, end);

      const { data, error: supabaseError, count } = await query;

      if (supabaseError) throw supabaseError;
      
      const cleanedData = (data as Phrase[]).map(cleanPhraseData);
      setPhrases(cleanedData);
      
      if (count) {
        setPagination(prev => ({
          ...prev,
          totalPages: Math.ceil(count / prev.rowsPerPage)
        }));
      }
    } catch (err) {
      console.error('Error:', err);
      setError('Failed to fetch phrases');
    } finally {
      setLoading(false);
    }
  };
const formatNumber = (num: number): string => {
  return num.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

const calculateStats = async () => {
  try {
    const { data: allPhrases, error, count } = await supabase
      .from('phrases')
      .select('*', { count: 'exact' })
      .range(0, 999999);  // This should cover all rows unless you have more than a million
    
    console.log('Supabase response:', { data: allPhrases, error, count });

    if (!allPhrases || allPhrases.length === 0) {
      console.error('No phrases data returned');
      return;
    }

    // Total count
    const totalCount = count || allPhrases.length;
    console.log('Total count (from Supabase count):', count);
    console.log('Total count (allPhrases.length):', allPhrases.length);

    // Difficulty distribution
    const difficultyCount = allPhrases.reduce((acc, p) => {
      acc[p.difficulty] = (acc[p.difficulty] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Category breakdown
    const uniqueCategories = new Set(allPhrases.map(p => p.category)).size;
    
    // Calculate percentages (note the capitalized difficulty levels)
    const easyPercentage = Math.round((difficultyCount['Easy'] || 0) / totalCount * 100) || 0;
    const mediumPercentage = Math.round((difficultyCount['Medium'] || 0) / totalCount * 100) || 0;
    const hardPercentage = Math.round((difficultyCount['Hard'] || 0) / totalCount * 100) || 0;

    console.log('Calculated percentages:', { easy: easyPercentage, medium: mediumPercentage, hard: hardPercentage });

     setStats({
      total: totalCount,
      uniqueCategories,
      difficultyBreakdown: {
        easy: easyPercentage,
        medium: mediumPercentage,
        hard: hardPercentage
      }
    });

    console.log('Set stats:', { total: totalCount, uniqueCategories, difficultyBreakdown: { easy: easyPercentage, medium: mediumPercentage, hard: hardPercentage } });
  } catch (err) {
    console.error('Error calculating stats:', err);
  }
};


  const fetchCategories = async () => {
    const { data, error } = await supabase
      .from('phrases')
      .select('category');
    if (!error && data) {
      const uniqueCategories = [...new Set(data.map(item => item.category))];
      setCategories(uniqueCategories);
    }
  };

  const fetchDifficulties = async () => {
    const { data, error } = await supabase
      .from('phrases')
      .select('difficulty');
    if (!error && data) {
      const uniqueDifficulties = [...new Set(data.map(item => item.difficulty))];
      setDifficulties(uniqueDifficulties);
    }
  };

  const fetchPartsOfSpeech = async () => {
    const { data, error } = await supabase
      .from('phrases')
      .select('part_of_speech');
    if (!error && data) {
      const uniquePartsOfSpeech = [...new Set(data.map(item => item.part_of_speech))];
      setPartsOfSpeech(uniquePartsOfSpeech);
    }
  };

  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
  };

const handleAddPhrase = async (e: React.FormEvent<HTMLFormElement>) => {
 e.preventDefault();
 if (!(await checkAuth())) return;

 try {
   const phraseData = {
       ...newPhrase
   };

   const { error } = await supabase
     .from('phrases')
     .insert([phraseData]);

    if (error) {
      if (error.code === '42501') {
        setError('Permission denied. You may not have the correct permissions to add phrases.');
      } else {
        setError(`Failed to add phrase: ${error.message}`);
      }
      return;
    }

    setNewPhrase({
      phrase: '',
      category: '',
      difficulty: '',
      subcategory: '',
      tags: '',
      hint: '',
      part_of_speech: ''
    });

    fetchPhrases();
  } catch (err) {
    console.error('Error:', err);
    setError('An unexpected error occurred');
  }
};


const handleEditPhrase = async (phrase: Phrase) => {
  if (!(await checkAuth())) return;

  try {
    // No need for array conversion anymore
    const { error } = await supabase
      .from('phrases')
      .update(phrase)
      .eq('id', phrase.id);

    if (error) {
      if (error.code === '42501') {
        setError('Permission denied. You may not have the correct permissions to edit phrases.');
      } else {
        setError(`Failed to update phrase: ${error.message}`);
      }
      return;
    }

    setSelectedPhrase(null);
    fetchPhrases();
  } catch (err) {
    console.error('Error:', err);
    setError('An unexpected error occurred');
  }
};


  const handleDeletePhrase = async (id: number) => {
  if (!window.confirm('Are you sure you want to delete this phrase?')) {
    return;
  }

  if (!(await checkAuth())) return;

  try {
    const { error } = await supabase
      .from('phrases')
      .delete()
      .eq('id', id);

    if (error) {
      if (error.code === '42501') {
        setError('Permission denied. You may not have the correct permissions to delete phrases.');
      } else {
        setError(`Failed to delete phrase: ${error.message}`);
      }
      return;
    }
    
    fetchPhrases();
  } catch (err) {
    console.error('Error:', err);
    setError('An unexpected error occurred');
  }
};

const handleBulkImport = async (text: string) => {
  if (!(await checkAuth())) return;
  if (!text?.trim()) return;

  try {
    const rows = text.trim().split('\n').map((row, index) => {
      const parts = row.split(',').map(part => part.trim());

      if (parts.length !== 7) {
        throw new Error(`Row ${index + 1} has invalid format. Expected 7 fields, found ${parts.length}.`);
      }

      const [phrase, category, difficulty, subcategory, tags, hint, part_of_speech] = parts;

      return {
        phrase,
        category,
        difficulty,
        subcategory,
        tags,  // No more processing needed
        hint,  // No more processing needed
        part_of_speech
      };
    });

    console.log(rows); // Log parsed rows for debugging

    const { error } = await supabase.from('phrases').insert(rows);
    if (error) throw error;
    
    setBulkImportText('');
    fetchPhrases();
    setError(null); // Clear any previous errors
  } catch (err) {
    console.error('Error:', err);
    setError(err.message || 'Failed to import phrases. Ensure the format is correct: phrase,category,difficulty,subcategory,tag1,tag2,hint,part_of_speech');
  }
};




const [bulkImportText, setBulkImportText] = useState('');
  const applyFilters = () => {
    setPagination(prev => ({ ...prev, currentPage: 1 }));
    fetchPhrases();
  };

  const resetFilters = () => {
    setFilters({
      category: '',
      difficulty: '',
      subcategory: '',
      part_of_speech: '',
      searchTerm: ''
    });
    setPagination(prev => ({ ...prev, currentPage: 1 }));
    fetchPhrases();
  };

  // Section header component
  const SectionHeader = ({ title, section }: { title: string, section: string }) => (
    <div 
      className="flex items-center gap-2 cursor-pointer"
      onClick={() => setExpandedSection(expandedSection === section ? '' : section)}
    >
      <ChevronRight 
        size={20}
        className={`transform transition-transform ${expandedSection === section ? 'rotate-90' : ''}`}
      />
      <h2 className="text-xl font-bold">{title}</h2>
    </div>
  );
  
  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-900 text-white">
        <div className="text-xl">Loading dashboard...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-4 lg:p-8">
	  {/* Login Modal */}
      {showLoginModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-gray-800 rounded-lg p-6 max-w-lg w-full">
            <Login />
          </div>
        </div>
      )}
	
      <div className="max-w-[1920px] mx-auto">
        {error && (
          <div className="bg-red-900 border border-red-700 text-red-100 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}

        {/* Stats Section */}
<div className="grid grid-cols-2 md:grid-cols-5 gap-6 mb-8">
          <div className="bg-gray-800 p-6 rounded-lg shadow">

    <div className="text-2xl font-bold">{formatNumber(animatedTotal)}</div>

    <div className="text-gray-400">Total Phrases</div>
  </div>
          <div className="bg-gray-800 p-6 rounded-lg shadow">
            <div className="text-2xl font-bold">{animatedUniqueCategories}</div>
            <div className="text-gray-400">Unique Categories</div>
          </div>
          <div className="bg-gray-800 p-6 rounded-lg shadow">
            <div className="text-2xl font-bold">{animatedEasy}%</div>
            <div className="text-gray-400">Easy Phrases</div>
          </div>
          <div className="bg-gray-800 p-6 rounded-lg shadow">
            <div className="text-2xl font-bold">{animatedMedium}%</div>
            <div className="text-gray-400">Medium Phrases</div>
          </div>
          <div className="bg-gray-800 p-6 rounded-lg shadow">
            <div className="text-2xl font-bold">{animatedHard}%</div>
            <div className="text-gray-400">Hard Phrases</div>
          </div>

        </div>
<div className="grid grid-cols-2 gap-6 mb-8">
        {/* Add New Phrase Section */}
        <div className="bg-gray-800 p-6 rounded-lg shadow">
          <SectionHeader title="Add New Phrase" section="addPhrase" />
          {expandedSection === 'addPhrase' && (
            <form onSubmit={handleAddPhrase} className="space-y-4 mt-4">
  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
    <input
      type="text"
      placeholder="Phrase"
      value={newPhrase.phrase}
      onChange={e => setNewPhrase({...newPhrase, phrase: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
      minLength={2}
    />
    <select
      value={newPhrase.category}
      onChange={e => setNewPhrase({...newPhrase, category: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
    >
      <option value="">Select Category</option>
      {categories.map(category => (
        <option key={category} value={category}>{category}</option>
      ))}
    </select>
    <input
      type="text"
      placeholder="Subcategory"
      value={newPhrase.subcategory}
      onChange={e => setNewPhrase({...newPhrase, subcategory: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
      minLength={2}
    />
    <select
      value={newPhrase.difficulty}
      onChange={e => setNewPhrase({...newPhrase, difficulty: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
    >
      <option value="">Select Difficulty</option>
      {difficulties.map(difficulty => (
        <option key={difficulty} value={difficulty}>{difficulty}</option>
      ))}
    </select>
    <input
      type="text"
      placeholder="Tags (comma separated)"
      value={newPhrase.tags}
      onChange={e => setNewPhrase({...newPhrase, tags: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
      pattern="^[a-zA-Z0-9\s,]+$"
      title="Enter comma-separated tags using letters, numbers and spaces"
    />
    <input
      type="text"
      placeholder="Hint"
      value={newPhrase.hint}
      onChange={e => setNewPhrase({...newPhrase, hint: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
      pattern="^[a-zA-Z0-9\s,]+$"
      title="Enter hint"
    />
    <select
      value={newPhrase.part_of_speech}
      onChange={e => setNewPhrase({...newPhrase, part_of_speech: e.target.value})}
      className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
      required
    >
      <option value="">Select Part of Speech</option>
      {partsOfSpeech.map(pos => (
        <option key={pos} value={pos}>{pos}</option>
      ))}
    </select>
  </div>
  <button
    type="submit"
    className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
  >
    Add Phrase
  </button>
</form>
          )}
        </div>

        {/* Bulk Import Section */}
<div className="bg-gray-800 p-6 rounded-lg shadow">
  <SectionHeader title="Bulk Import" section="bulkImport" />
  {expandedSection === 'bulkImport' && (
    <div className="mt-4">
      <textarea
        value={bulkImportText}
        onChange={(e) => setBulkImportText(e.target.value)}
        className="w-full h-32 p-2 bg-gray-700 border border-gray-600 rounded text-white mb-4"
  placeholder={`phrase,category,difficulty,subcategory,tags,hint,part_of_speech`}
/>
<p className="text-sm text-gray-400 mb-4">
  Format: phrase,category,difficulty,subcategory,tag1 tag2 tag3,hint1 hint2,part_of_speech
</p>
      <button 
        onClick={() => handleBulkImport(bulkImportText)}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        Submit Import
      </button>
    </div>
  )}
</div>
</div>
        {/* Filters Section */}
        <div className="bg-gray-800 p-6 rounded-lg shadow mb-8">
          <h2 className="text-xl font-bold mb-4">Filters</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <input
              type="text"
              name="searchTerm"
              placeholder="Search phrases or tags"
              value={filters.searchTerm}
              onChange={handleFilterChange}
              className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
            />
            <select
              name="category"
              value={filters.category}
              onChange={handleFilterChange}
              className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
            >
              <option value="">Select Category</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
            <input
              type="text"
              name="subcategory"
              placeholder="Subcategory"
              value={filters.subcategory}
              onChange={handleFilterChange}
              className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
            />
            <select
              name="difficulty"
              value={filters.difficulty}
              onChange={handleFilterChange}
              className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
            >
              <option value="">Select Difficulty</option>
              {difficulties.map(difficulty => (
                <option key={difficulty} value={difficulty}>{difficulty}</option>
              ))}
            </select>
            <select
              name="part_of_speech"
              value={filters.part_of_speech}
              onChange={handleFilterChange}
              className="p-2 border border-gray-600 rounded bg-gray-700 text-white"
            >
              <option value="">Select Part of Speech</option>
              {partsOfSpeech.map(pos => (
                <option key={pos} value={pos}>{pos}</option>
              ))}
            </select>
          </div>
          <div className="flex justify-end gap-4">
            <button
              onClick={resetFilters}
              className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
            >
              Reset Filters
            </button>
            <button
              onClick={applyFilters}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Apply Filters
            </button>
          </div>
        </div>

        {/* Table Section */}
        <div className="bg-gray-800/50 rounded-xl shadow-xl overflow-hidden">
  <div className="p-4 bg-gray-800 border-b border-gray-700 flex justify-between items-center">
    <select
      value={pagination.rowsPerPage}
      onChange={(e) => setPagination({
        ...pagination,
        rowsPerPage: Number(e.target.value),
        currentPage: 1
      })}
      className="bg-gray-700 border border-gray-600 rounded px-2 py-1"
    >
      {[100, 250, 500, 1000].map(value => (
        <option key={value} value={value}>{value} rows</option>
      ))}
    </select>
    
    <button
      onClick={() => setShowCardModal(true)}
      className="px-3 py-1  bg-blue-600 text-white rounded hover:bg-blue-700"
    >
      Mobile Card View
    </button>
            
            <div className="flex items-center gap-4">
              <button
                onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage - 1 }))}
                disabled={pagination.currentPage === 1}
                className="px-3 py-1 bg-gray-700 rounded disabled:opacity-50"
              >
                Previous
              </button>
              <span>
                Page {pagination.currentPage} of {pagination.totalPages}
              </span>
              <button
                onClick={() => setPagination(prev => ({ ...prev, currentPage: prev.currentPage + 1 }))}
                disabled={pagination.currentPage === pagination.totalPages}
                className="px-3 py-1 bg-gray-700 rounded disabled:opacity-50"
              >
                Next
              </button>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full table-auto">
              <thead>
                <tr className="border-b border-gray-700">
                  {[
				    ['id', 'ID'],
                    ['phrase', 'Phrase'],
                    ['category', 'Category'],
                    ['subcategory', 'Subcategory'],
                    ['difficulty', 'Difficulty'],
                    ['tags', 'Tags'],
                    ['hint', 'Hint'],
                    ['part_of_speech', 'Part of Speech']
                  ].map(([key, label]) => (
                    <th
                      key={key}
                      onClick={() => handleSort(key as keyof Phrase)}
                      className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider bg-gray-800/80 cursor-pointer"
                    >
                      <div className="flex items-center gap-2">
                        {label}
                        {sortConfig.key === key && (
                          sortConfig.direction === 'asc' ? <ChevronUp size={14} /> : <ChevronDown size={14} />
                        )}
                      </div>
                    </th>
                  ))}
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider bg-gray-800/80">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
  {phrases.map((phrase, index) => (
    <tr 
      key={phrase.id} 
      className={`
        border-b border-gray-700/50 
        ${index % 2 === 0 ? 'bg-gray-800/30' : 'bg-gray-800/50'}
        hover:bg-gray-700/50 transition-colors duration-150
      `}
    >
      <td className="px-4 py-3 whitespace-nowrap">{phrase.id}</td>  {/* New ID cell */}
      <td className="px-4 py-3 whitespace-nowrap">{phrase.phrase}</td>
      <td className="px-4 py-3 whitespace-nowrap">{phrase.category}</td>
      <td className="px-4 py-3 whitespace-nowrap">{phrase.subcategory}</td>
      <td className="px-4 py-3 whitespace-nowrap">{phrase.difficulty}</td>
      <td className="px-4 py-3 whitespace-nowrap">{phrase.tags}</td>
      <td className="px-4 py-3 whitespace-nowrap">{phrase.hint}</td>
      <td className="px-4 py-3 whitespace-nowrap">{phrase.part_of_speech}</td>
      <td className="px-4 py-3 whitespace-nowrap">
        {renderTableActions(phrase)}
      </td>
    </tr>
  ))}
</tbody>
            </table>
          </div>
        </div>
      </div>
	
{/* Add Card Modal */}
{showCardModal && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
    <div className="bg-gray-800 rounded-lg p-6 max-w-lg w-full max-h-[90vh] overflow-y-auto">
      {/* Modal header */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Phrase Card View</h2>
        <button 
          onClick={() => setShowCardModal(false)}
          className="p-2 hover:bg-gray-700 rounded-full"
        >
          <X size={20} />
        </button>
      </div>

      {/* Navigation */}
      <div className="flex justify-between items-center mb-4">
        <span className="text-sm text-gray-400">
          Phrase {currentIndex + 1} of {phrases.length}
        </span>
        <div className="flex gap-4">
          <button
            onClick={() => setCurrentIndex(prev => Math.max(0, prev - 1))}
            disabled={currentIndex === 0}
            className="p-2 hover:bg-gray-700 rounded-full disabled:opacity-50"
          >
            <ChevronLeft size={20} />
          </button>
          <button
            onClick={() => setCurrentIndex(prev => Math.min(phrases.length - 1, prev + 1))}
            disabled={currentIndex === phrases.length - 1}
            className="p-2 hover:bg-gray-700 rounded-full disabled:opacity-50"
          >
            <ChevronRight size={20} />
          </button>
        </div>
      </div>
{/* Display current phrase */}
      {displayPhrase && (
        <>

      <Field
        label="Phrase"
        value={displayPhrase.phrase}
        onChange={e => setEditedPhrase({ ...editedPhrase!, phrase: e.target.value })}
      />
      <Field
        label="Category"
        value={displayPhrase.category}
        onChange={e => setEditedPhrase({ ...editedPhrase!, category: e.target.value })}
        type="select"
        options={categories}
      />
      <Field
        label="Subcategory"
        value={displayPhrase.subcategory}
        onChange={e => setEditedPhrase({ ...editedPhrase!, subcategory: e.target.value })}
      />
      <Field
        label="Difficulty"
        value={displayPhrase.difficulty}
        onChange={e => setEditedPhrase({ ...editedPhrase!, difficulty: e.target.value })}
        type="select"
        options={difficulties}
      />
      <Field
        label="Tags"
        value={displayPhrase.tags}
        onChange={e => setEditedPhrase({ ...editedPhrase!, tags: e.target.value })}
        type="tags"
      />
      <Field
        label="Hint"
        value={displayPhrase.hint}
        onChange={e => setEditedPhrase({ ...editedPhrase!, hint: e.target.value })}
      />
      <Field
        label="Part of Speech"
        value={displayPhrase.part_of_speech}
        onChange={e => setEditedPhrase({ ...editedPhrase!, part_of_speech: e.target.value })}
        type="select"
        options={partsOfSpeech}
      />

       {/* Edit controls */}
          <div className="flex justify-between mt-6">
            {isEditing ? (
              <>
                <button onClick={handleCancel} className="flex items-center gap-2 px-4 py-2 bg-gray-700 rounded-lg hover:bg-gray-600">
                  <X size={16} />Cancel
                </button>
                <button onClick={handleCardSave} className="flex items-center gap-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700">
                  <Save size={16} />Save
                </button>
              </>
            ) : (
              <button onClick={handleEdit} className="flex items-center gap-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700">
                <Pencil size={16} />Edit
              </button>
            )}
          </div>
        </>
      )}
    </div>
  </div>
)}
      {/* Edit Modal */}
      {selectedPhrase && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-gray-800 rounded-lg p-6 max-w-lg w-full">
            <h2 className="text-xl font-bold mb-4">Edit Phrase</h2>
            <div className="space-y-4">
              <input
                type="text"
                value={selectedPhrase.tags}
                onChange={e => setSelectedPhrase({...selectedPhrase, phrase: e.target.value})}
                className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
                placeholder="Phrase"
              />
              <select
                value={selectedPhrase.category}
                onChange={e => setSelectedPhrase({...selectedPhrase, category: e.target.value})}
                className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              >
                <option value="">Select Category</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
              <input
                type="text"
                value={selectedPhrase.subcategory}
                onChange={e => setSelectedPhrase({...selectedPhrase, subcategory: e.target.value})}
                className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
                placeholder="Subcategory"
              />
              <select
                value={selectedPhrase.difficulty}
                onChange={e => setSelectedPhrase({...selectedPhrase, difficulty: e.target.value})}
                className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              >
                <option value="">Select Difficulty</option>
                {difficulties.map(difficulty => (
                  <option key={difficulty} value={difficulty}>{difficulty}</option>
                ))}
              </select>
              <input
  type="text"
  value={selectedPhrase.tags}
  onChange={e => setSelectedPhrase({...selectedPhrase, tags: e.target.value})}
  className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
  placeholder="Tags (comma separated)"
/>
<input
  type="text"
  value={selectedPhrase.hint}
  onChange={e => setSelectedPhrase({...selectedPhrase, hint: e.target.value})}
  className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
  placeholder="Hint"
/>
              <select
                value={selectedPhrase.part_of_speech}
                onChange={e => setSelectedPhrase({...selectedPhrase, part_of_speech: e.target.value})}
                className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              >
                <option value="">Select Part of Speech</option>
                {partsOfSpeech.map(pos => (
                  <option key={pos} value={pos}>{pos}</option>
                ))}
              </select>
              <div className="flex justify-end gap-4">
                <button
                  onClick={() => setSelectedPhrase(null)}
                  className="px-4 py-2 text-gray-400 hover:text-gray-200"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleEditPhrase(selectedPhrase)}
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboard;